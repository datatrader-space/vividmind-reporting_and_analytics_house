# Generated by Django 5.2.3 on 2025-07-02 08:46

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CostUnitConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_name', models.CharField(help_text="Name of the cost unit (e.g., 'per_user_scraped', 'per_gb_downloaded', 'per_device_minute').", max_length=100, unique=True)),
                ('cost_per_unit', models.DecimalField(decimal_places=6, help_text='The cost associated with one unit of this item.', max_digits=10)),
                ('description', models.TextField(blank=True, help_text='Description of what this cost unit represents.', null=True)),
            ],
            options={
                'verbose_name': 'Cost Unit Configuration',
                'verbose_name_plural': 'Cost Unit Configurations',
            },
        ),
        migrations.CreateModel(
            name='JobAnalysisReport',
            fields=[
                ('job_uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the bot job.', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Name of the job (if applicable from source system).', max_length=255, null=True)),
                ('total_tasks_in_job', models.IntegerField(default=0, help_text='Total number of tasks associated with this job.')),
                ('tasks_completed_successfully', models.IntegerField(default=0, help_text='Number of tasks in the job that completed successfully.')),
                ('total_users_scraped', models.IntegerField(default=0, help_text='Total users scraped across all tasks in this job.')),
                ('total_posts_scraped', models.IntegerField(default=0, help_text='Total posts scraped across all tasks in this job.')),
                ('total_comments_scraped', models.IntegerField(default=0, help_text='Total comments scraped across all tasks in this job.')),
                ('total_interactions', models.IntegerField(default=0, help_text='Total interactions (follows, likes, etc.) across all tasks in this job.')),
                ('total_data_downloaded_kb', models.BigIntegerField(default=0, help_text='Total data downloaded in KB for the entire job.')),
                ('total_data_uploaded_kb', models.BigIntegerField(default=0, help_text='Total data uploaded in KB for the entire job.')),
                ('total_requests_failed', models.IntegerField(default=0, help_text='Total failed requests across all tasks in this job.')),
                ('has_any_billing_issue', models.BooleanField(default=False, help_text='True if any task in this job had a billing issue.')),
                ('billing_issue_tasks', models.JSONField(blank=True, default=list, help_text='List of task_uuids with billing issues in this job.', null=True)),
                ('total_job_cost', models.DecimalField(decimal_places=4, default=0.0, help_text='Total calculated cost for this entire job.', max_digits=10)),
                ('total_device_usage_time_minutes', models.IntegerField(default=0, help_text='Total minutes devices were active for this job.')),
                ('total_device_connection_failures', models.IntegerField(default=0, help_text='Total device connection failures for this job.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this report was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this report was last updated.')),
            ],
            options={
                'verbose_name': 'Job Analysis Report',
                'verbose_name_plural': 'Job Analysis Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the task, typically from the main task system.', primary_key=True, serialize=False)),
                ('job_uuid', models.UUIDField(db_index=True, help_text='UUID of the job this task belongs to.', null=True)),
                ('name', models.CharField(help_text='Name of the task.', max_length=255)),
                ('task_type', models.CharField(help_text="Type of the task (e.g., 'scraping', 'interaction', 'email_sending').", max_length=50)),
                ('interact', models.BooleanField(default=False, help_text='True if this is an interaction-based task.')),
            ],
            options={
                'verbose_name': 'Bot Task',
                'verbose_name_plural': 'Bot Tasks',
            },
        ),
        migrations.CreateModel(
            name='TaskSummaryReport',
            fields=[
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='summary_report', serialize=False, to='reporting.task')),
                ('total_runs_initiated', models.IntegerField(default=0)),
                ('total_runs_completed', models.IntegerField(default=0)),
                ('total_runs_failed_exception', models.IntegerField(default=0)),
                ('total_runs_incomplete', models.IntegerField(default=0)),
                ('total_found_next_page_info_count', models.IntegerField(default=0)),
                ('total_next_page_info_not_found_count', models.IntegerField(default=0)),
                ('total_saved_file_count', models.IntegerField(default=0)),
                ('total_downloaded_file_count', models.IntegerField(default=0)),
                ('total_failed_download_count', models.IntegerField(default=0)),
                ('cumulative_total_runtime_seconds', models.FloatField(default=0.0)),
                ('average_runtime_seconds_per_run', models.FloatField(default=0.0)),
                ('latest_overall_task_status', models.CharField(blank=True, max_length=50, null=True)),
                ('latest_overall_bot_login_status', models.CharField(blank=True, max_length=50, null=True)),
                ('latest_last_status_of_task', models.CharField(blank=True, max_length=255, null=True)),
                ('latest_billing_issue_resolution_status', models.CharField(blank=True, max_length=255, null=True)),
                ('latest_report_start_datetime', models.DateTimeField(blank=True, null=True)),
                ('latest_report_end_datetime', models.DateTimeField(blank=True, null=True)),
                ('latest_total_task_runtime_text', models.CharField(blank=True, max_length=100, null=True)),
                ('run_id_of_latest_report', models.UUIDField(blank=True, null=True)),
                ('latest_scraped_data_summary', models.JSONField(default=dict)),
                ('latest_data_enrichment_summary', models.JSONField(default=dict)),
                ('aggregated_scraped_data', models.JSONField(default=dict)),
                ('aggregated_data_enrichment', models.JSONField(default=dict)),
                ('all_non_fatal_errors', models.JSONField(default=list)),
                ('all_exceptions', models.JSONField(default=list)),
                ('all_specific_exception_reasons', models.JSONField(default=list)),
                ('all_failed_downloads_summary', models.JSONField(default=list)),
                ('total_reports_considered', models.IntegerField(default=0)),
                ('first_report_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_report_datetime', models.DateTimeField(blank=True, null=True)),
                ('has_next_page_info', models.BooleanField(blank=True, default=None, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_alerted_at', models.DateTimeField(blank=True, help_text="Timestamp when the last alert for this summary's status was sent.", null=True)),
            ],
            options={
                'verbose_name': 'Task Summary Report',
                'verbose_name_plural': 'Task Summary Reports',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskAnalysisReport',
            fields=[
                ('run_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_task_status', models.CharField(max_length=50)),
                ('report_start_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_end_datetime', models.DateTimeField(blank=True, null=True)),
                ('total_task_runtime_text', models.CharField(max_length=100)),
                ('total_task_runtime_seconds', models.FloatField()),
                ('runs_initiated', models.IntegerField()),
                ('runs_completed', models.IntegerField()),
                ('runs_failed_exception', models.IntegerField()),
                ('runs_incomplete', models.IntegerField()),
                ('found_next_page_info_count', models.IntegerField()),
                ('next_page_info_not_found_count', models.IntegerField()),
                ('saved_file_count', models.IntegerField()),
                ('downloaded_file_count', models.IntegerField()),
                ('failed_download_count', models.IntegerField()),
                ('overall_bot_login_status', models.CharField(max_length=50)),
                ('last_status_of_task', models.CharField(max_length=255)),
                ('billing_issue_resolution_status', models.CharField(max_length=255)),
                ('scraped_data_summary', models.JSONField(default=dict)),
                ('data_enrichment_summary', models.JSONField(default=dict)),
                ('non_fatal_errors_summary', models.TextField()),
                ('exceptions_summary', models.TextField()),
                ('specific_exception_reasons', models.TextField()),
                ('failed_downloads_summary', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reporting.task')),
            ],
        ),
    ]
